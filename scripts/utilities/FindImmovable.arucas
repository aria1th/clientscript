import * from Minecraft;

// Single box manager class allows us to abstract the highlighting process
class SingleBoxManager {
    var boxes = { };

    // Removes all boxes from rendering
    fun clearBoxes() {
        foreach (box : this.boxes.getValues()) {
            box.stopRendering();
        }
        this.boxes.clear();
    }


    // Adds a position for a box to render
    fun addPosition(x, y, z) {
        boxPos = new Pos(x, y, z);
        if (!this.boxes.getKeys().contains(boxPos)) {
            box = new BoxShape(boxPos);
            box.setOutlinePixelWidth(0);
            box.setOpacity(50);
            box.setRenderThroughBlocks(true);
            box.render();
            this.boxes.put(boxPos, box);
        }
    }

    // Removes a position for a box to render
    fun removePosition(x, y, z) {
        boxPos = new Pos(x, y, z);
        box = this.boxes.remove(boxPos);
        if (box != null) {
            box.stopRendering();
        }
    }
}

client = MinecraftClient.getClient();
boxManager = new SingleBoxManager();

// List of immovable blocks
immovables = Set.of(Material.OBSIDIAN, Material.ENDER_CHEST, Material.CRYING_OBSIDIAN, Material.ANVIL, Material.CHIPPED_ANVIL, Material.DAMAGED_ANVIL, Material.RESPAWN_ANCHOR, Material.SPAWNER);
shouldRun = false;
searchRadius = 64;
fromY = 0;
toY = 64;

// Main function that is used to find immovables
fun findImmovable() {
    player = Player.get();
    world = client.getWorld();
    x = player.getX().floor();
    y = player.getY().floor();
    z = player.getZ().floor();
    // Basically scanning every single block in a set radius
    // This is slow and you could run this on multiple threads
    // to maybe speed it up a little, but I don't think it really matters...
    for (i = x - searchRadius; i < x + searchRadius; i++) {
        for (j = fromY; j < toY; j++) {
            for (h = z - searchRadius; h < z + searchRadius; h++) {
                // If the block is non movable then we set it to be highlighted
                // Otherwise we set it to not highlight, this is done to remove 
                // any that were previously highlighted
                block = world.getBlockAt(i, j, h);
                if (immovables.contains(block.getMaterial())) {
                    boxManager.addPosition(i, j, h);
                } else {
                    boxManager.removePosition(i, j, h);
                }
            }
        }
    }
}

findImmovableCommand = {
    "name" : "findImmovable",
    "subcommands" : {
        "find" : {
            "" : findObsidian,
            "start" : {
                "" : fun() {
                    print("Started searching for immovable blocks");
                    shouldRun = true;
                }
            },
            "stop" : {
                "" : fun() {
                    print("Stopped searching for immovable blocks");
                    shouldRun = false;
                }
            }
        },
        "clear" : {
            "" : fun() {
                boxManager.clearBoxes();
            }
        },
        "radius <radius>" : {
            "" : fun(radius) {
                if (radius > 128) {
                    print("Warning radius of over 128 will take a long time!");
                }
                searchRadius = radius;
            }
        },
        "height <from> <to>" : {
            "" : fun(from_, to) {
                fromY = from_;
                toY = to;
            }
        }
    },
    "arguments" : {
        "radius" : {
            "type" : "Integer",
            "min" : 1,
            // Radius over 512 will take forever so we limit it
            "max" : 512,
            "suggests" : [64, 128, 256]
        },
        "from" : {
            "type" : "Integer",
            // -64 and 319 for 1.18+ compat
            "min" : -64,
            "max" : 319,
            "suggests" : [0, -64]
        },
        "to" : {
            "type" : "Integer",
            "min" : -64,
            "max" : 319,
            "suggests" : [64, 128]
        }
    }
};

client.addCommand(CommandBuilder.fromMap(findImmovableCommand));

// When a block is broken and it's obsidian we stop 
// highlighting it because it doesn't exist anymore.
blockBreakEvent = new GameEvent("onBlockBroken", fun(block) {
    if (immovables.contains(block.getMaterial())) {
        boxManager.removePosition(block.getX(), block.getY(), block.getZ());
    }
});

blockBreakEvent.register();

// Core loop
while (true) {
    if (shouldRun) {
        findImmovable();
    }
    // We sleep so we don't set our computer on fire
    sleep(1000);
}
