import * from Minecraft;
import Java from util.Internal;
import * from minecraft.CommandUtils;
import * from minecraft.AreaParallelUtils;
import RGB from minecraft.ColorCodes;
import * from minecraft.PosUtils;
client = MinecraftClient.getClient();
player = client.getPlayer();
world = client.getWorld();
reach = 32;
xreach = 32;
yreach = 32;
zreach = 32;
xThreads = 2;
yThreads = 2;
zThreads = 2;
safetyLimit = 20000000;
StreamSupportStream = Java.getStaticMethodDelegate("java.util.stream.StreamSupport", "stream", 2);
BlockPosIterate = Java.getStaticMethodDelegate("net.minecraft.util.math.BlockPos","iterate", 2);
CollectorList = Java.getStaticMethodDelegate('java.util.stream.Collectors', "toList", 0);
BooleanValueOf = Java.getStaticMethodDelegate('java.lang.Boolean', 'valueOf', 1);
globalBoxes = {};
fun iterateFun(xreach,yreach, zreach, function, arguments, apply){
    retVal = [];
    sx = player.getX().round();
    sy = player.getY().round();
    sz = player.getZ().round();
    areas = new DivideArea(new PosWithFun(sx-xreach, sy-yreach, sz-zreach), new PosWithFun(sx+xreach, sy+yreach, sz+zreach)).divideBy(xThreads,yThreads,zThreads);
    lazyValues = [];
    i = 0;
    foreach (Area : areas){
        //player.message(Area.format());
        _i = i;
        lambdaAsync = fun (){
            //print("started Thread " + _i + " Area size : "+Area.getSize() + " at "+ getMilliTime());
            streamInit = BlockPosIterate(Area.pos1.asJavaPos(), Area.pos2.asJavaPos()).spliterator();
            result =  StreamSupportStream(streamInit, Java.valueOf(false)).
                filter(Java.predicateOf(fun(a){ val = function(a, arguments); return val != false && val != null;})).
                map(Java.functionOf(fun(a){return apply(a, function(a, arguments));})).
                filter(Java.predicateOf(fun(a){return a != false && a != null;})).
                collect(CollectorList()).toArucas();
            //print("finished Thread " + _i+ " at "+ getMilliTime());
            return result;
            };
        lazyValues.append(Thread.runAsync(lambdaAsync));
        i ++;
    }
    foreach(values : lazyValues){
        retVal.addAll(values);
    }
    //stop();
    return retVal;
}
fun iterateFunDirect(xreach,yreach, zreach, function, arguments, apply){
    retVal = [];
    sx = player.getX().round();
    sy = player.getY().round();
    sz = player.getZ().round();
    streamInit = BlockPosIterate(new PosWithFun(sx-xreach, sy-yreach, sz-zreach).asJavaPos(), new PosWithFun(sx+xreach, sy+yreach, sz+zreach).asJavaPos()).spliterator();
    return StreamSupportStream(streamInit, Java.valueOf(false)).
                filter(Java.predicateOf(fun(a){ val = function(a, arguments); return val != false && val != null;})).
                map(Java.functionOf(fun(a){return apply(a, function(a, arguments));})).
                filter(Java.predicateOf(fun(a){return a != false && a != null;})).
                collect(CollectorList()).toArucas();

}
fun iterateFunLazy(xreach,yreach, zreach, function, arguments, apply){
    retVal = [];
    sx = player.getX().round();
    sy = player.getY().round();
    sz = player.getZ().round();
    lambda  = fun (){
    streamInit = BlockPosIterate(new PosWithFun(sx-xreach, sy-yreach, sz-zreach).asJavaPos(), new PosWithFun(sx+xreach, sy+yreach, sz+zreach).asJavaPos()).spliterator();
    return StreamSupportStream(streamInit, Java.valueOf(false)).
                filter(Java.predicateOf(fun(a){ val = function(a, arguments); return val != false && val != null;})).
                map(Java.functionOf(fun(a){return apply(a, function(a, arguments));})).
                filter(Java.predicateOf(fun(a){return a != false && a != null;})).
                collect(CollectorList()).toArucas();
    };
    lazyValue = Thread.runAsync(lambda);
    return lazyValue;
}
fun renderBoxWhateverColorFromMap(position, color){
    box = new BoxShape(position);
    box.setColour(color.hexcode);
    box.setOutlineColor(0,0,0);
    box.setOpacity(20);
    box.setOutlinePixelWidth(15);
    box.setRenderThroughBlocks(true);
    return box;
}
fun iterateFunJavaPredicateColored(coloredfunction, mapping){
    retVal = [];
    //area = world.getAreaPredicate(new Pos(sx-reach, sy-reach, sz-reach), new Pos(sx+reach, sy+reach, sz+reach), function);
    //tt = getMilliTime();
    //area = world.getArea(new Pos(sx-xreach, sy-yreach, sz-zreach), new Pos(sx+xreach, sy+yreach, sz+zreach));
    //player.messageActionBar("preparing " + ((2* reach+1)^3) + " blocks list took" + (getMilliTime() - tt)+ "ms");
    return iterateFun(xreach,yreach, zreach, coloredfunction, mapping, renderBoxWhateverColorFromMap);
}
fun getDistanceTo(pos){
    return ((player.getX() - pos.getX()) ^2 + (player.getY() - pos.getY()) ^2+(player.getZ() - pos.getZ()) ^2)^0.5;
}
fun highlightJavaPredicateColor(predicate, mapping) {
    globalBoxes = iterateFunJavaPredicateColored(predicate, mapping);
    st = getMilliTime();
    while (true){
        foreach (boxes : globalBoxes){
            boxes.render();
        }
        globalBoxesNext = iterateFunJavaPredicateColored(predicate, mapping);
        player.messageActionBar("Search/Rendering for " + ((2* xreach+1) *(2* yreach+1) *(2* zreach+1) ) + " blocks took " + (getMilliTime() - st)+ "ms with Thread count " + (xThreads * yThreads * zThreads));
        st = getMilliTime();
        foreach (boxes : globalBoxesNext){
            boxes.render();
        }
        foreach (boxes : globalBoxes){
            boxes.stopRendering();
        }
        globalBoxes = globalBoxesNext;
    }
}
fun predicateMap(position, mappings) {
    id = world.getBlockAt(position).getId();
    // Flexible containsString
    foreach (values : mappings.getKeys()){
        if (id.contains(values)){
            return mappings.get(values);
        }
    }
    // Fixed block search
    // if (mapping.contains(id)){
    //    return mapping.get(id);
    // }
    return null;
}
class VarRGB{
    var r;
    var g;
    var b;
    VarRGB(r,g,b){
        this.r = r;
        this.g = g;
        this.b = b;
        this.hexcode = b+ 256 * g + 65536 * r;
    }
}
//tasks
xdistanceTask = fun (newVal){
    if((2* newVal+1) *(2* yreach+1) *(2* zreach+1) > safetyLimit){
        player.message("Block Area count of " +((2* xreach+1) *(2* yreach+1) *(2* zreach+1)) + " will exceed safety count " + safetyLimit);
        return;
    }
    if(newVal > 0){
        xreach = newVal;
    }
};
ydistanceTask = fun (newVal){
    if((2* xreach+1) *(2* newVal+1) *(2* zreach+1) > safetyLimit){
        player.message("Block Area count of " +((2* xreach+1) *(2* yreach+1) *(2* zreach+1)) + " will exceed safety count " + safetyLimit);
        return;
    }
    if(newVal > 0){
        yreach = newVal;
    }
};
zdistanceTask = fun (newVal){
    if((2* xreach+1) *(2* yreach+1) *(2* newVal+1) > safetyLimit){
        player.message("Block Area count of " +((2* xreach+1) *(2* yreach+1) *(2* zreach+1)) + " will exceed safety count " + safetyLimit);
        return;
    }
    if(newVal > 0){
        zreach = newVal;
    }
};
xThreadChangeTask = fun (newVal){
    if(newVal > 0){
        xThreads = newVal;
    }
};
yThreadChangeTask = fun (newVal){
    if(newVal > 0){
        yThreads = newVal;
    }
};
zThreadChangeTask = fun (newVal){
    if(newVal > 0){
        zThreads = newVal;
    }
};
safetyCountTask = fun (newVal){
    safetyLimit = newVal;
    player.message("Safety count is now set to " + safetyLimit);
};
addSearchTask = fun (newVal,colour){
    mapping.put(newVal, colour);
    player.message("Toggled " +newVal + " search");
};
addSearchRGBTask = fun (newVal,r,g,b){
    mapping.put(newVal, new VarRGB(r,g,b));
    player.message("Toggled " +newVal + " search");
};
removeSearchTask = fun (val){
    if (mapping.getKeys().contains(val)){
        mapping.remove(val);
        player.message("Removed " +val + " search");
    }
};

mapping = {
    //'warped' : [0, 216, 255],
    //'diamond' : [0, 216, 255],
    //'redstone' : [255,0,0],
    //'gold' : [255,224,0],
    // 'ender_chest' : [0,0,255],
    // 'ancient' : [255,124,0],
    // 'bee_nest' : [255,224,0]
};
suggesterRemove = fun (args...){
    return mapping.getKeys();
};
//mapCommand = new LinearCommand([['highlight'], ['remove'], ['string', 'Word', suggesterRemove]], removeSearchTask).getMap();
//print(MapPrinter.showMap(mapCommand));
new LinearCommand([['highlight'], ['remove'], ['string', 'Word', suggesterRemove]], removeSearchTask).process();
new LinearCommand([['highlight'], ['add'], ['string', 'Word'], ['color', 'Enum', RGB.type]], addSearchTask).process();
new LinearCommand([['highlight'], ['add'], ['string', 'Word'], ['R', 'Integer', 0, 255], ['G', 'Integer', 0, 255], ['B', 'Integer', 0, 255]], addSearchRGBTask).process();
new LinearCommand([['highlight'], ['setXDistance'], ['distance', 'Integer',1,255]], xdistanceTask).process();
new LinearCommand([['highlight'], ['xThreads'], ['distance', 'Integer',1,4]], xThreadChangeTask).process();
new LinearCommand([['highlight'], ['yThreads'], ['distance', 'Integer',1,4]], yThreadChangeTask).process();
new LinearCommand([['highlight'], ['zThreads'], ['distance', 'Integer',1,4]], zThreadChangeTask).process();
new LinearCommand([['highlight'], ['setYDistance'], ['distance', 'Integer',1,255]], ydistanceTask).process();
new LinearCommand([['highlight'], ['setZDistance'], ['distance', 'Integer',1,255]], zdistanceTask).process();
//highlightJavaPredicate(predicate);
thread = Thread.runThreaded(fun (){highlightJavaPredicateColor(predicateMap, mapping);});
//thread = Thread.runThreaded(fun (){highlightJavaPredicateColorBlock(predicateMapBlock, mapping);});
//highlightJavaPredicateColor(predicateMap, mapping);
while(true){
    sleep(150);
}