import * from Minecraft;
client = MinecraftClient.getClient();
player = client.getPlayer();
world = client.getWorld();

new GameEvent('onDimensionChange', fun (){world = client.getWorld(); player = client.getPlayer();}).register();
isCage = false;
//static
DimensionMap = {'overworld' : Set.of(), 'the_nether' :  Set.of()};
renderRange = 12;

logger = Set.of();
fun printIfNotInSet(str){
    if (logger.contains(str)){
        return;
    }
    logger.add(str);
    print(str);
}
class Chunk {
    static fun formatOf(posValue) : String{
        return 'X : '+ Math.floor(posValue.getX()/16) + 'Z : ' + Math.floor(posValue.getZ()/16);
    }
    static fun hashCodeOf(posValue) {
        return (Math.floor(posValue.getX() / 16) * 65536 + Math.floor(posValue.getZ()/16)).toString() ;
    }
}

fun checkChunks(){
    dim = player.getDimension();
    if (DimensionMap.get(dim) == null){
        DimensionMap.put(dim, Set.of());
    }
    printIfNotInSet(dim);
    refreshAndGetBlocks(dim, isCage);
}

fun testIterator(subPos, isCage){
    if (isCage){
        return testCage(subPos);
    }
    return testKill(subPos);
}

fun testCage(pos){
    isBedrock = true;
    shouldHash = false;
    subPos = world.getPositions(pos.add(-1, -1, -1), pos.add(1, 0, 1));
    foreach (subpositions : subPos){
        blockGet = world.getBlockAt(subpositions);
        if (!shouldHash && blockGet.getId() != 'air' && blockGet.getId() != 'void_air' && blockGet.getId() != 'barrier'){
            shouldHash = true;
        }
        if (blockGet.getId() != 'bedrock'){
            isBedrock = false;
            break;
        }
    }
    return [shouldHash, isBedrock];
}
fun testKill(pos){
    isBedrock = true;
    shouldHash = false;
    subPos = world.getPositions(pos.add(-1, -2, -1), pos.add(1, 0, 1));
    foreach (subpositions : subPos){
        blockGet = world.getBlockAt(subpositions);
        if (!shouldHash && blockGet.getId() != 'air' && blockGet.getId() != 'void_air' && blockGet.getId() != 'barrier'){
            shouldHash = true;
        }
        if (blockGet.getId() != 'bedrock'){
            isBedrock = false;
            break;
        }
    }
    return [shouldHash, isBedrock];
}
fun refreshAndGetBlocks(dim, isCage){
    world = client.getWorld();
    pos = player.getPos();
    fixedY = 0;
    if (dim == 'overworld'){
        fixedY = -60;
    }
    else if (dim.contains('the_nether')){
        fixedY = 127;
    }
    else {
        return;
    }
    pos = new Pos(Math.floor(pos.getX()), fixedY, Math.floor(pos.getZ()));
    startPos = pos.add(-renderRange * 16, 0, -renderRange* 16);
    endPos = pos.add(renderRange * 16, 0, renderRange* 16);
    positions = world.getPositions(startPos, endPos);
    foreach ( position : positions){
        chunkHash = Chunk.hashCodeOf(position);
        if (DimensionMap.get(dim).contains(chunkHash)){
            continue;
        }
        result = testIterator(position, isCage);
        if (Math.mod(position.getX(), 16) == 15 && Math.mod(position.getZ(), 16) == 15 &&result.get(0)){
            DimensionMap.get(dim).add(chunkHash);
            printIfNotInSet('Cached c/'+ Chunk.formatOf(position));
        }
        if (result.get(1)){
            printIfNotInSet("Found matching position at "+ dim + ' position : '+ position );
            stop();
            return;
        }
    }
}

//print(testIterator(new Pos(9402,-60,7498), true));
saved = false;
while (true){
    tt = getMilliTime();
    checkChunks();
    if (!saved &&len(DimensionMap.get('overworld')) > 5000){
        saved = true;
        str = DimensionMap.get('overworld').toString();
        file= new File('setDump.txt');
        file.write(str);
    }
    player.messageActionBar("Overworld hash size : " + len(DimensionMap.get('overworld')) + "Nether hash size : " + len(DimensionMap.get('the_nether')) + "logger size : " + len(logger) + ' '+(getMilliTime() - tt) + 'ms took');
}
hold();


